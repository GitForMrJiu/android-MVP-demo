package com.nine.mvp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PickHistroy".
*/
public class PickHistroyDao extends AbstractDao<PickHistroy, Long> {

    public static final String TABLENAME = "PickHistroy";

    /**
     * Properties of entity PickHistroy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property VC_Name = new Property(1, String.class, "VC_Name", false, "VC__NAME");
        public final static Property VC_Code = new Property(2, String.class, "VC_Code", false, "VC__CODE");
        public final static Property VC_SupplierCode = new Property(3, String.class, "VC_SupplierCode", false, "VC__SUPPLIER_CODE");
        public final static Property Vc_billno = new Property(4, String.class, "vc_billno", false, "VC_BILLNO");
        public final static Property VC_Suppliername = new Property(5, String.class, "VC_Suppliername", false, "VC__SUPPLIERNAME");
        public final static Property VC_Specification = new Property(6, String.class, "VC_Specification", false, "VC__SPECIFICATION");
        public final static Property VC_Manufacturer = new Property(7, String.class, "VC_Manufacturer", false, "VC__MANUFACTURER");
        public final static Property VC_Unit = new Property(8, String.class, "VC_Unit", false, "VC__UNIT");
        public final static Property VC_BatchNumber = new Property(9, String.class, "VC_BatchNumber", false, "VC__BATCH_NUMBER");
        public final static Property D_Amount = new Property(10, String.class, "D_Amount", false, "D__AMOUNT");
        public final static Property Vc_warehouseCode = new Property(11, String.class, "vc_warehouseCode", false, "VC_WAREHOUSE_CODE");
        public final static Property Vc_warehousename = new Property(12, String.class, "vc_warehousename", false, "VC_WAREHOUSENAME");
        public final static Property Posid = new Property(13, String.class, "posid", false, "POSID");
        public final static Property Posno = new Property(14, String.class, "posno", false, "POSNO");
        public final static Property D_amount1 = new Property(15, String.class, "D_amount1", false, "D_AMOUNT1");
        public final static Property D_money = new Property(16, String.class, "D_money", false, "D_MONEY");
        public final static Property State = new Property(17, Integer.class, "State", false, "STATE");
        public final static Property CartonNo = new Property(18, String.class, "CartonNo", false, "CARTON_NO");
        public final static Property OperateTime = new Property(19, String.class, "OperateTime", false, "OPERATE_TIME");
        public final static Property Temp = new Property(20, String.class, "temp", false, "TEMP");
    }


    public PickHistroyDao(DaoConfig config) {
        super(config);
    }
    
    public PickHistroyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PickHistroy\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"VC__NAME\" TEXT NOT NULL ," + // 1: VC_Name
                "\"VC__CODE\" TEXT NOT NULL ," + // 2: VC_Code
                "\"VC__SUPPLIER_CODE\" TEXT," + // 3: VC_SupplierCode
                "\"VC_BILLNO\" TEXT," + // 4: vc_billno
                "\"VC__SUPPLIERNAME\" TEXT," + // 5: VC_Suppliername
                "\"VC__SPECIFICATION\" TEXT," + // 6: VC_Specification
                "\"VC__MANUFACTURER\" TEXT," + // 7: VC_Manufacturer
                "\"VC__UNIT\" TEXT," + // 8: VC_Unit
                "\"VC__BATCH_NUMBER\" TEXT," + // 9: VC_BatchNumber
                "\"D__AMOUNT\" TEXT," + // 10: D_Amount
                "\"VC_WAREHOUSE_CODE\" TEXT," + // 11: vc_warehouseCode
                "\"VC_WAREHOUSENAME\" TEXT," + // 12: vc_warehousename
                "\"POSID\" TEXT," + // 13: posid
                "\"POSNO\" TEXT," + // 14: posno
                "\"D_AMOUNT1\" TEXT," + // 15: D_amount1
                "\"D_MONEY\" TEXT," + // 16: D_money
                "\"STATE\" INTEGER," + // 17: State
                "\"CARTON_NO\" TEXT," + // 18: CartonNo
                "\"OPERATE_TIME\" TEXT," + // 19: OperateTime
                "\"TEMP\" TEXT);"); // 20: temp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PickHistroy\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PickHistroy entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getVC_Name());
        stmt.bindString(3, entity.getVC_Code());
 
        String VC_SupplierCode = entity.getVC_SupplierCode();
        if (VC_SupplierCode != null) {
            stmt.bindString(4, VC_SupplierCode);
        }
 
        String vc_billno = entity.getVc_billno();
        if (vc_billno != null) {
            stmt.bindString(5, vc_billno);
        }
 
        String VC_Suppliername = entity.getVC_Suppliername();
        if (VC_Suppliername != null) {
            stmt.bindString(6, VC_Suppliername);
        }
 
        String VC_Specification = entity.getVC_Specification();
        if (VC_Specification != null) {
            stmt.bindString(7, VC_Specification);
        }
 
        String VC_Manufacturer = entity.getVC_Manufacturer();
        if (VC_Manufacturer != null) {
            stmt.bindString(8, VC_Manufacturer);
        }
 
        String VC_Unit = entity.getVC_Unit();
        if (VC_Unit != null) {
            stmt.bindString(9, VC_Unit);
        }
 
        String VC_BatchNumber = entity.getVC_BatchNumber();
        if (VC_BatchNumber != null) {
            stmt.bindString(10, VC_BatchNumber);
        }
 
        String D_Amount = entity.getD_Amount();
        if (D_Amount != null) {
            stmt.bindString(11, D_Amount);
        }
 
        String vc_warehouseCode = entity.getVc_warehouseCode();
        if (vc_warehouseCode != null) {
            stmt.bindString(12, vc_warehouseCode);
        }
 
        String vc_warehousename = entity.getVc_warehousename();
        if (vc_warehousename != null) {
            stmt.bindString(13, vc_warehousename);
        }
 
        String posid = entity.getPosid();
        if (posid != null) {
            stmt.bindString(14, posid);
        }
 
        String posno = entity.getPosno();
        if (posno != null) {
            stmt.bindString(15, posno);
        }
 
        String D_amount1 = entity.getD_amount1();
        if (D_amount1 != null) {
            stmt.bindString(16, D_amount1);
        }
 
        String D_money = entity.getD_money();
        if (D_money != null) {
            stmt.bindString(17, D_money);
        }
 
        Integer State = entity.getState();
        if (State != null) {
            stmt.bindLong(18, State);
        }
 
        String CartonNo = entity.getCartonNo();
        if (CartonNo != null) {
            stmt.bindString(19, CartonNo);
        }
 
        String OperateTime = entity.getOperateTime();
        if (OperateTime != null) {
            stmt.bindString(20, OperateTime);
        }
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(21, temp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PickHistroy entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getVC_Name());
        stmt.bindString(3, entity.getVC_Code());
 
        String VC_SupplierCode = entity.getVC_SupplierCode();
        if (VC_SupplierCode != null) {
            stmt.bindString(4, VC_SupplierCode);
        }
 
        String vc_billno = entity.getVc_billno();
        if (vc_billno != null) {
            stmt.bindString(5, vc_billno);
        }
 
        String VC_Suppliername = entity.getVC_Suppliername();
        if (VC_Suppliername != null) {
            stmt.bindString(6, VC_Suppliername);
        }
 
        String VC_Specification = entity.getVC_Specification();
        if (VC_Specification != null) {
            stmt.bindString(7, VC_Specification);
        }
 
        String VC_Manufacturer = entity.getVC_Manufacturer();
        if (VC_Manufacturer != null) {
            stmt.bindString(8, VC_Manufacturer);
        }
 
        String VC_Unit = entity.getVC_Unit();
        if (VC_Unit != null) {
            stmt.bindString(9, VC_Unit);
        }
 
        String VC_BatchNumber = entity.getVC_BatchNumber();
        if (VC_BatchNumber != null) {
            stmt.bindString(10, VC_BatchNumber);
        }
 
        String D_Amount = entity.getD_Amount();
        if (D_Amount != null) {
            stmt.bindString(11, D_Amount);
        }
 
        String vc_warehouseCode = entity.getVc_warehouseCode();
        if (vc_warehouseCode != null) {
            stmt.bindString(12, vc_warehouseCode);
        }
 
        String vc_warehousename = entity.getVc_warehousename();
        if (vc_warehousename != null) {
            stmt.bindString(13, vc_warehousename);
        }
 
        String posid = entity.getPosid();
        if (posid != null) {
            stmt.bindString(14, posid);
        }
 
        String posno = entity.getPosno();
        if (posno != null) {
            stmt.bindString(15, posno);
        }
 
        String D_amount1 = entity.getD_amount1();
        if (D_amount1 != null) {
            stmt.bindString(16, D_amount1);
        }
 
        String D_money = entity.getD_money();
        if (D_money != null) {
            stmt.bindString(17, D_money);
        }
 
        Integer State = entity.getState();
        if (State != null) {
            stmt.bindLong(18, State);
        }
 
        String CartonNo = entity.getCartonNo();
        if (CartonNo != null) {
            stmt.bindString(19, CartonNo);
        }
 
        String OperateTime = entity.getOperateTime();
        if (OperateTime != null) {
            stmt.bindString(20, OperateTime);
        }
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(21, temp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PickHistroy readEntity(Cursor cursor, int offset) {
        PickHistroy entity = new PickHistroy( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // VC_Name
            cursor.getString(offset + 2), // VC_Code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // VC_SupplierCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vc_billno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // VC_Suppliername
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // VC_Specification
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // VC_Manufacturer
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // VC_Unit
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // VC_BatchNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // D_Amount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // vc_warehouseCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // vc_warehousename
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // posid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // posno
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // D_amount1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // D_money
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // State
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // CartonNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // OperateTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // temp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PickHistroy entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVC_Name(cursor.getString(offset + 1));
        entity.setVC_Code(cursor.getString(offset + 2));
        entity.setVC_SupplierCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVc_billno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVC_Suppliername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVC_Specification(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVC_Manufacturer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVC_Unit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVC_BatchNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setD_Amount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVc_warehouseCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVc_warehousename(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPosid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPosno(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setD_amount1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setD_money(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setState(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setCartonNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOperateTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTemp(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PickHistroy entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PickHistroy entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PickHistroy entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
